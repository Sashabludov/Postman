HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!ss");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

var jsonData = pm.response.json();

var req_body = request.data

pm.test("Check name", function() {
    pm.expect(jsonData.name).to.eql("Sasha");
});

pm.test("Check age", function() {
    pm.expect(jsonData.age).to.eql("28");
});

pm.test("Check salary", function() {
    pm.expect(jsonData.salary).to.eql(1000);
});

var reqData = request.data

pm.test("Check name request", function() {
    pm.expect(jsonData.name).to.eql(reqData.name);
});

pm.test("Check age request", function() {
    pm.expect(jsonData.age).to.eql(reqData.age);
});

pm.test("Check salary request", function() {
    pm.expect(jsonData.salary).to.eql(Number(reqData.salary));
});

console.log(jsonData.family)

pm.test("Check salary_1_5 years request", function() {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

var jsonData = pm.response.json();

var reqData = pm.request.url.query.toObject()

pm.test("Check name request", function() {
    pm.expect(jsonData.name).to.eql(reqData.name);
});
pm.test("Check age request", function() {
    pm.expect(jsonData.age).to.eql(reqData.age);
});
pm.test("Check salary request", function() {
    pm.expect(jsonData.salary).to.eql(Number(reqData.salary));
});

console.log(jsonData.family)

pm.test("Check dog=name", function() {
    pm.expect(jsonData.family.pets.dog).have.property("name");
});
pm.test("Check dog=age", function() {
    pm.expect(jsonData.family.pets.dog).have.property("age");
});
pm.test("Check dog=Luky", function() {
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});
pm.test("Check dog=4", function() {
    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. s.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

var jsonData = pm.response.json();

var reqData = pm.request.url.query.toObject()

pm.test("Check name request", function() {
    pm.expect(jsonData.name).to.eql(reqData.name);
});
pm.test("Check age request", function() {
    pm.expect(jsonData.age).to.eql(28);
});

console.log(reqData.salary)
console.log(jsonData.salary)
console.log(jsonData.salary[0])
console.log(jsonData.salary[1])
console.log(jsonData.salary[2])

pm.test("salary 0", function() {
    pm.expect(jsonData.salary[0]).to.eql(Number(reqData.salary));
});
pm.test("salary 1", function() {
    pm.expect(Number(jsonData.salary[1])).to.eql(reqData.salary*2);
});
pm.test("salary 2", function() {
    pm.expect(Number(jsonData.salary[2])).to.eql(reqData.salary*3);
});

pm.environment.set("name", jsonData.name);
pm.environment.set("age", jsonData.age);
pm.environment.set("salary", jsonData.salary);

const salary = jsonData.salary

console.log ("salary");
for (let i in salary) {
    console.log(i);
    console.log(salary[i]);
}

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

var jsonData = pm.response.json();

var reqData = pm.request.url.query.toObject()

pm.environment.set(jsonData.salary, reqData.salary)
pm.environment.set(jsonData.age, reqData.age)
pm.environment.set(jsonData.name, reqData.name)

pm.test("start salary", function() {
    pm.expect(jsonData.start_qa_salary).to.eql(1000);
});
pm.test("salary 6", function() {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(2000);
});
pm.test("salary 12", function() {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(2700.0);
});
pm.test("salary 1.5", function() {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(3300.0);
});
pm.test("salary 3.5", function() {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(3800.0);
});

pm.test("person", function() {
    pm.expect(jsonData.person).to.have.property("u_age" || "u_name");
});

var req_body = request.data

pm.test("start_qa_salary =", function() {
    pm.expect(jsonData.start_qa_salary).to.eql(Number(req_body.salary));
});
pm.test("qa_salary_after_6_months =", function() {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_body.salary*2);
});
pm.test("qa_salary_after_12_months =", function() {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_body.salary*2.7);
});
pm.test("qa_salary_after_1.5_year =", function() {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(req_body.salary*3.3);
});
pm.test("qa_salary_after_3.5_years =", function() {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(req_body.salary*3.8);
});

var u_salary = jsonData.person.u_name[1]
console.log(u_salary)

pm.test("person u_name salary", function () {
     pm.expect(Number(u_salary)).to.eql(Number(req_body.salary));
});

var u_age = jsonData.person.u_age
console.log(u_age)

pm.test("person u_age", function () {
     pm.expect(u_age).to.eql(Number(req_body.age));
});

var u_salary_5_years = jsonData.person.u_salary_5_years
console.log(u_salary_5_years)

pm.test("person u_salary_5_years", function () {
     pm.expect(u_salary_5_years).to.eql(Number(req_body.salary*4.2));
});

const person = jsonData.person

console.log ("person cikl");
for (let i in person) {
    console.log(i);
    console.log(person[i]);
}
